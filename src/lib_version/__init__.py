import importlib.metadata

try:
    # _version.py is generated by setuptools_scm during the build process
    # and contains the version string derived from Git tags.
    from ._version import __version__
except ImportError:
    try:
        __version__ = importlib.metadata.version("lib-version")
    except importlib.metadata.PackageNotFoundError:
        # Fallback if package is not installed or version cannot be determined
        __version__ = "0.0.0.dev0+unknown"

class VersionUtil:
    """
    A utility class to provide information about the 'lib-version' package.

    When an instance of this class is created, it can be used to retrieve
    the version of the 'lib-version' package itself.

    Usage in another project (after installing 'lib-version'):
        from lib_version import VersionUtil

        vu = VersionUtil()
        current_version = vu.get_package_version()
        print(f"'lib-version' package version: {current_version}")
    """

    def __init__(self):
        pass

    def get_package_version(self) -> str:
        """
        Returns the version string of this package ('lib-version').
        """
        return __version__

__all__ = [
    "VersionUtil",
    "__version__"
]
