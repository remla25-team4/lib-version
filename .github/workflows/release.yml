name: Verify and Release lib-version

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*' # Trigger workflow on tags like v1.0.0, v1.2.3, v1.2.3-alpha.1

jobs:
  # This job builds the package, runs tests, and verifies the version
  build-verify-release:
    name: Build, Verify, and Release
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      # Step 3: Install build dependencies and test dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build pytest twine wheel

      # Step 4: Run tests
      - name: Run tests with pytest
        run: pytest tests/

      # Step 5: Build the package using python -m build
      # setuptools_scm automatically embeds the version from the Git tag
      - name: Build package
        run: python -m build

      # Step 6: Verify the built package version matches the Git tag
      - name: Verify built package version
        run: |
          echo "Verifying package version..."
          EXPECTED_VERSION=$(echo "${{ github.ref_name }}" | sed 's/^v//')
          echo "Expecting version derived from tag: $EXPECTED_VERSION"

          WHEEL_FILE=$(ls dist/*.whl | head -n 1)
          echo "Checking wheel file: $WHEEL_FILE"

          echo "Running twine check..."
          twine check $WHEEL_FILE

        # Extract the version string from the package's METADATA file within the wheel
        # unzip -p extracts the file content to stdout
        # grep -i '^Version:' finds the Version line (case-insensitive)
        # awk '{print $2}' prints the second field (the version string)
          ACTUAL_VERSION=$(unzip -p $WHEEL_FILE *.dist-info/METADATA | grep -i '^Version:' | awk '{print $2}')
          echo "Actual version found in package metadata: $ACTUAL_VERSION"

        # Compare the extracted version with the expected version from the tag
          if [[ "$ACTUAL_VERSION" == "$EXPECTED_VERSION" ]]; then
            echo "SUCCESS: Package version matches Git tag."
            exit 0
          else
            echo "ERROR: Version mismatch! Expected '$EXPECTED_VERSION' from tag, but package metadata contains '$ACTUAL_VERSION'."
            exit 1
          fi

      # Step 7: Publish distribution to GitHub Packages
      - name: Publish distribution to GitHub Packages
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # The user is always __token__ when authenticating with a token
          user: __token__
          # The password is the GITHUB_TOKEN generated by Actions
          password: ${{ secrets.GITHUB_TOKEN }}
          # The repository URL specifies GitHub Packages for the current repository owner
          repository_url: https://pypi.pkg.github.com/${{ github.repository_owner }}/
          # Prevent overwriting existing package versions
          skip_existing: true