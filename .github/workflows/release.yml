name: Verify and Release lib-version

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*' # Trigger workflow on tags like v1.0.0, v1.2.3, v1.2.3-alpha.1

jobs:
  # This job builds the package, runs tests, and verifies the version
  build-verify-release:
    name: Build, Verify, and Release
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      # Step 3: Install build dependencies and test dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build pytest twine wheel

      # Step 4: Run tests
      - name: Run tests with pytest
        run: pytest tests/

      # Step 5: Build the package using python -m build
      # setuptools_scm automatically embeds the version from the Git tag
      - name: Build package
        run: python -m build

      # Step 6: Verify the built package version matches the Git tag
      - name: Verify built package version
        run: |
          echo "Verifying package version..."
          # Get Expected Version
          # Extract the version string from the Git tag that triggered the workflow
          EXPECTED_VERSION=$(echo "${{ github.ref_name }}" | sed 's/^v//')
          if [ -z "$EXPECTED_VERSION" ]; then
              echo "ERROR: Could not extract expected version from tag '${{ github.ref_name }}'."
              exit 1
          fi
          echo "Expecting version derived from tag: $EXPECTED_VERSION"
          
          # Find Wheel File
          # Ensure dist directory exists and contains exactly one wheel file (adjust if needed)
          if [ ! -d dist ] || [ $(ls dist/*.whl | wc -l) -ne 1 ]; then
            echo "ERROR: dist/ directory not found or does not contain exactly one .whl file."
            ls -l dist/ # Show contents for debugging
            exit 1
          fi
          WHEEL_FILE=$(ls dist/*.whl)
          echo "Checking wheel file: $WHEEL_FILE"
          
          # Basic Check with Twine
          echo "Running twine check..."
          twine check "$WHEEL_FILE"
          if [ $? -ne 0 ]; then
             echo "ERROR: twine check failed for $WHEEL_FILE"
             exit 1
          fi
          
          # Extract METADATA Content
          # Use unzip -p to print content to stdout, handle potential errors
          METADATA_CONTENT=$(unzip -p "$WHEEL_FILE" *.dist-info/METADATA 2>/dev/null)
          if [ $? -ne 0 ] || [ -z "$METADATA_CONTENT" ]; then
             echo "ERROR: Failed to extract METADATA from $WHEEL_FILE or METADATA is empty."
             # Attempt to list archive contents for debugging
             unzip -l "$WHEEL_FILE" *.dist-info/METADATA
             exit 1
          fi
          
          # Find Version Line in METADATA
          # Use grep -i for case-insensitivity, check if found
          VERSION_LINE=$(echo "$METADATA_CONTENT" | grep -i '^Version:')
          if [ -z "$VERSION_LINE" ]; then
             echo "ERROR: Could not find line starting with 'Version:' in METADATA."
             echo "--- METADATA Content Start ---"
             echo "$METADATA_CONTENT"
             echo "--- METADATA Content End ---"
             exit 1
          fi
          
          # Extract Version Value
          # Use sed to remove 'Version:' prefix (case-insensitive) and leading spaces
          ACTUAL_VERSION_RAW=$(echo "$VERSION_LINE" | sed -E 's/^Version:[[:space:]]*//i')
          # Use xargs to trim leading/trailing whitespace from the result
          ACTUAL_VERSION=$(echo "$ACTUAL_VERSION_RAW" | xargs)
          
          if [ -z "$ACTUAL_VERSION" ]; then
              echo "ERROR: Extracted version string is empty after processing line '$VERSION_LINE'."
              exit 1
          fi
          echo "Actual version found in package metadata: '$ACTUAL_VERSION'" # Added quotes
          
          # Compare Versions
          echo "Comparing '$ACTUAL_VERSION' (found) with '$EXPECTED_VERSION' (expected)..."
          if [[ "$ACTUAL_VERSION" == "$EXPECTED_VERSION" ]]; then
            echo "SUCCESS: Package version matches Git tag."
            exit 0 # Success
          else
            echo "ERROR: Version mismatch! Expected '$EXPECTED_VERSION' from tag, but package metadata contains '$ACTUAL_VERSION'."
            exit 1 # Fail the workflow
          fi

      # Step 7: Publish distribution to GitHub Packages
      - name: Publish distribution to GitHub Packages
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # The user is always __token__ when authenticating with a token
          user: __token__
          # The password is the GITHUB_TOKEN generated by Actions
          password: ${{ secrets.GITHUB_TOKEN }}
          # The repository URL specifies GitHub Packages for the current repository owner
          repository_url: https://pypi.pkg.github.com/${{ github.repository_owner }}/
          # Prevent overwriting existing package versions
          skip_existing: true