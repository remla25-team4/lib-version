import pytest
import re
from lib_version import get_version, __version__

def test_get_version_returns_string():
    """
    Verify that get_version() returns a string and it matches
    an expected version format (both release and dev versions).
    """
    version = get_version()

    print(f"DEBUG: get_version() returned: {version!r}")

    # Check if the returned value is a string
    assert isinstance(version, str), f"Expected a string, but got {type(version)}"

    # Check if the string is not empty
    assert len(version) > 0, "Expected a non-empty version string"

    # Check if the string matches a flexible version format pattern
    # This pattern should match release tags (e.g., '1.0.0') and
    # development versions generated by setuptools_scm (e.g., '0.1.dev1+ga6868fc.d20250504')
    flexible_version_pattern = r"^\d+\.\d+(\.\d+)?([.-]?(dev|a|b|rc|post)\d*)?(\+.*)?$"
    assert re.match(flexible_version_pattern, version), \
        f"Version string '{version}' does not match expected format regex: '{flexible_version_pattern}'"

def test_dunder_version_exists_and_is_string():
    """
    Verify the __version__ variable exists directly and is a string.
    (This might be redundant if get_version() just returns __version__,
     but can be useful as a direct check).
    """
    print(f"DEBUG: __version__ is: {__version__!r}")
    assert isinstance(__version__, str), f"Expected __version__ to be a string, but got {type(__version__)}"
    assert len(__version__) > 0, "Expected __version__ to be a non-empty string"

    # You can optionally add the same regex check here too if desired
    flexible_version_pattern = r"^\d+\.\d+(\.\d+)?([.-]?(dev|a|b|rc|post)\d*)?(\+.*)?$"
    assert re.match(flexible_version_pattern, __version__), \
        f"__version__ string '{__version__}' does not match expected format regex: '{flexible_version_pattern}'"